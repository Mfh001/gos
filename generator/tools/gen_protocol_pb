#!/usr/bin/env ruby

require "yaml"

source = "./config/protocol.yml"
defines = YAML.load_file(source)
protocols = {}
defines.each do |k, p_defines|
  p_defines.each do |protocol, define|
    protocols[protocol] = define
  end
end
defines = protocols

PROTOCOL_TYPE = defines.keys

package = "pbapi"
proto_dir = "../src/goslib/src/gen/api/#{package}"
`mkdir -p #{proto_dir}`

header = %Q{\
/*
 * Generated by tools/gen_protocol_pb
 */
}

encode_handlers = []
decode_handlers = []

defines.each do |protocol, define|
  decode_handlers << %Q{
func decode#{protocol}(buffer *packet.Packet) (interface{}, error) {
    data := &pt.#{protocol}{}
    err := proto.Unmarshal(buffer.RemainData(), data)    
    return data, err
}}
  encode_handlers << %Q{
func encode#{protocol}(buffer *packet.Packet, value interface{}) error {
    data, err := proto.Marshal(value.(*pt.#{protocol}))
    buffer.WriteBytes(data)
    return err
}}
end

#
# Generate api decoder
#

target = "#{proto_dir}/decoder.go"
File.open(target, "w") do |io|
  io.write %Q{\
#{header}
package #{package}

import (
        "gen/api/pt"
        "github.com/golang/protobuf/proto"
	"goslib/packet"
)

#{decode_handlers.join("\n")}

type DecodeHandler func(buffer *packet.Packet) (interface{}, error)

var decode_handlers = map[string]DecodeHandler{
    #{defines.keys.map{|protocol| "\"#{protocol}\": decode#{protocol}"}.join(",\n    ")}}

func Decode(decode_method string, buffer *packet.Packet) (interface{}, error) {
	if handler, ok := decode_handlers[decode_method]; ok {
		return handler(buffer)
	} else {
		return nil, nil
	}
}
}
end
`gofmt -w #{target}`

#
# Generate api encoder
#
target = "#{proto_dir}/encoder.go"
File.open(target, "w") do |io|
  io.write %Q{\
#{header}
package #{package}

import (
	"gen/api/pt"
        "github.com/golang/protobuf/proto"
  	"goslib/packet"
)

#{encode_handlers.join("\n")}

type EncodeHandler func(buffer *packet.Packet, value interface{}) error
var encode_handlers = map[string]EncodeHandler{
    #{defines.keys.map{|protocol| "\"#{protocol}\": encode#{protocol}"}.join(",\n    ")}}

func Encode(encode_method string, v interface{}) (*packet.Packet, error) {
    protocol := pt.NameToId[encode_method]
    buffer := packet.Writer()
    buffer.WriteUint16(protocol)
    err := encode_handlers[encode_method](buffer, v)
    return buffer, err
}
}
end
`gofmt -w #{target}`
