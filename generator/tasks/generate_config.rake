require 'roo'

desc "Generate configs file from Excel"
task :generate_config => :environment do
  config_dir = File.expand_path("config/excels")
  sheets = []

  parser_path = File.expand_path("config/excels/custom_config_parser.rb")
  if File.exists?(parser_path)
    require parser_path
  else
    CUSTOM_PARSER = {}
  end

  table_map = {}
  Dir.foreach(config_dir) do |config_file_path|
    next if config_file_path =~ /~\$.+\.xls/
    extname = File.extname(config_file_path)
    if extname == '.xlsx'
      s = Roo::Excelx.new(File.expand_path(config_dir + '/' + config_file_path))
    elsif extname == '.xls'
      s = Roo::Excel.new(File.expand_path(config_dir + '/'+ config_file_path))
    else
      next
    end

    s.sheets.each do |sheet|
      next if sheet !~ /^config_.+/
      sheets << sheet
    end

    s.sheets.each do |sheet|
      next if sheet !~ /^config_.+/
      custom_parser = CUSTOM_PARSER[sheet.pluralize]
      # puts "generating sheet: #{sheet} "
      s.default_sheet = sheet
      table_name = sheet.pluralize
      table_map[table_name] = {
        field_names: [],
        field_types: [],
        rows: []
      }
      field_names = {}
      field_indexes = {}
      s.row(2).each_with_index do |field, index|
        begin
          next if field.blank?
          name, type = field.split(":")
          field_names[index] = name
          field_indexes[index] = type
          table_map[table_name][:field_names] << name
          table_map[table_name][:field_types] << convert_define(type)
          unless ['string', 'text', 'integer', 'int', 'float', 'boolean', 'integer-array', 'float-array', 'origin'].include?(type)
            raise "TYPE ERROR: #{type} didn't defined."
          end
        rescue => e
          puts "In sheet: #{sheet}, field: #{field}"
          raise e
        end
      end
      4.upto(s.last_row).map do |row|
        row_values = []
        row_vs = s.row(row)
        if row_vs[0].blank?
          next
        end
        row_vs.each_with_index do |value, index|
          next if field_indexes[index].nil?
          field_name = field_names[index]
          if value == 'NULL'
            value = 'undefined'
          elsif custom_parser and custom_parser[field_name]
            value = custom_parser[field_name].call(value)
          else
            field_type = field_indexes[index]
            if field_type == 'integer' or field_type == 'int'
              if value.blank?
                value = 0
              else
                value = value.to_i
              end
            elsif field_type == 'integer-array' or field_type == 'int-array' or field_type == 'float-array'
              if value.nil?
                value = "[]"
              else
                value = "[#{value.gsub(";", ",")}]"
              end
            elsif field_type == 'float'
              value = 0.0 if field_type == 'float' and value.blank?
            elsif field_type == 'string' or field_type == 'text'
              value_class = value.class
              if value_class == Fixnum or value_class == Float
                value = value.to_i.to_s
              end
              if value.nil?
                value = "\"\""
              else
                value = "`#{value.gsub('"', '\"')}`"
              end
            elsif field_type == 'origin' and value.blank?
              value = 'nil'
            end
          end
          row_values << "#{field_name.camelize}:#{value}"
        end
        table_map[table_name][:rows] << row_values
      end
    end

  end

  `mkdir -p ../goslib/src/gen/game_data/`

  table_map.each do |table_name, data|
    data_path = "../goslib/src/gen/game_data/#{table_name}.go"
    data_content = "// Generated by generate_config.rake \n"

    idx = 0
    map = []
    rows = data[:rows].map do |row_values|
      map << "#{row_values.first.split(":").last}:#{idx}"
      idx += 1
      "{#{row_values.join(', ')}}"
    end

    struct_name = get_struct_name(table_name)

    arr_name = struct_name.pluralize.uncapitalize
    map_name = "map#{struct_name.pluralize}"

    data_content << %Q{
package gen

#{gen_struct(table_name, data[:field_names], data[:field_types])}

var #{arr_name} = []*#{struct_name}{
    #{rows.join(",\n")},
}

var #{map_name} = map[#{data[:field_types].first}]int{
    #{map.join(",\n")},
}

func Find#{struct_name}(key #{data[:field_types].first}) *#{struct_name} {
    if idx, ok := #{map_name}[key]; ok {
        return #{arr_name}[idx]
	}
	return nil
}

func First#{struct_name}() *#{struct_name} {
	return #{arr_name}[0]
}

func Last#{struct_name}() *#{struct_name} {
    return #{arr_name}[len(#{arr_name})]
}

func All#{struct_name.pluralize}() []*#{struct_name} {
	return #{arr_name}
}
}
    File.open(data_path, "w") do |io|
      io.write data_content
    end
    `go fmt #{data_path}`
  end
end
