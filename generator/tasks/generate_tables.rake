desc "Generate Structs from mysql tables"

task :generate_tables => :environment do
  header = %Q{
/*
 * Generated by generate_tables
 * Warning: don't modify this file
 */
}
  structs_content = "#{header}package consts\n"
  struct_to_table_name = ""
  register_content = ""

  ActiveRecord::Base.connection.tables.each do |table_name|
    next if table_name == 'schema_migrations'
    next if table_name == 'schema_persistances'
    next if table_name == 'ar_internal_metadata'
    struct_name = get_struct_name(table_name)
    structs_content << "type #{struct_name} struct{\n"
    field_names = []
    field_types = []
    field_values = []
    field_formatters = []
    ActiveRecord::Base.connection.columns(table_name).each do |c| 
      if c.name != "uuid"
        field_names << c.name
        field_type = type_formatter(c.type)
        field_types << field_type
        field_values << "data.#{c.name.camelize}"
        field_formatters << "#{c.name}=#{field_type}"
      end
      structs_content << %Q{    #{c.name.camelize} #{convert_define(c.type)} `db:"#{c.name}"`\n}
    end
    structs_content << "}\n"
    struct_to_table_name << %Q{"#{struct_name}": "#{table_name}",\n}
    register_content << %Q{    dbInstance.AddTableWithName(#{struct_name}{}, "#{table_name}").SetKeys(false, "uuid")\n}
  end

  #################################################
  # Generate table structs
  #################################################
  structs_content << %Q{
    var StructToTableNameMap = map[string]string{
      #{struct_to_table_name}
    }
  }
  `mkdir -p ../src/goslib/src/gen/consts`
  path = "../src/goslib/src/gen/consts/tables.go"
  File.open(path, "w") { |io| io.write structs_content }
  `go fmt #{path}`


  #################################################
  # Generate register_tables
  #################################################
  `mkdir -p ../src/goslib/src/gen/register`
  path = "../src/goslib/src/gen/register/register_tables.go"
  File.open(path, "w") do |io| 
    io.write %Q{\
#{header}
package register

import (
    . "gen/consts"
    "github.com/go-gorp/gorp"
)

func RegisterTables(dbInstance *gorp.DbMap) {
#{register_content}
}}
  end
  `go fmt #{path}`
end
