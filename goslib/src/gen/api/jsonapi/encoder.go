/*
 * Generated by tools/gen_protocol_json
 */

package jsonapi

import (
	"gen/api/pt"
	"goslib/packet"
)

func encodeSessionAuthParams(buffer *packet.Packet, value interface{}) error {
	data, err := json.Marshal(value.(*pt.SessionAuthParams))
	buffer.WriteBytes(data)
	return err
}

func encodeSessionAuthResponse(buffer *packet.Packet, value interface{}) error {
	data, err := json.Marshal(value.(*pt.SessionAuthResponse))
	buffer.WriteBytes(data)
	return err
}

func encodeOk(buffer *packet.Packet, value interface{}) error {
	data, err := json.Marshal(value.(*pt.Ok))
	buffer.WriteBytes(data)
	return err
}

func encodeFail(buffer *packet.Packet, value interface{}) error {
	data, err := json.Marshal(value.(*pt.Fail))
	buffer.WriteBytes(data)
	return err
}

func encodeEquipLoadParams(buffer *packet.Packet, value interface{}) error {
	data, err := json.Marshal(value.(*pt.EquipLoadParams))
	buffer.WriteBytes(data)
	return err
}

func encodeEquipLoadResponse(buffer *packet.Packet, value interface{}) error {
	data, err := json.Marshal(value.(*pt.EquipLoadResponse))
	buffer.WriteBytes(data)
	return err
}

func encodeEquipUnLoadParams(buffer *packet.Packet, value interface{}) error {
	data, err := json.Marshal(value.(*pt.EquipUnLoadParams))
	buffer.WriteBytes(data)
	return err
}

func encodeEquipUnLoadResponse(buffer *packet.Packet, value interface{}) error {
	data, err := json.Marshal(value.(*pt.EquipUnLoadResponse))
	buffer.WriteBytes(data)
	return err
}

func encodeLoginResponse(buffer *packet.Packet, value interface{}) error {
	data, err := json.Marshal(value.(*pt.LoginResponse))
	buffer.WriteBytes(data)
	return err
}

func encodeJoinParams(buffer *packet.Packet, value interface{}) error {
	data, err := json.Marshal(value.(*pt.JoinParams))
	buffer.WriteBytes(data)
	return err
}

func encodeJoinResponse(buffer *packet.Packet, value interface{}) error {
	data, err := json.Marshal(value.(*pt.JoinResponse))
	buffer.WriteBytes(data)
	return err
}

type EncodeHandler func(buffer *packet.Packet, value interface{}) error

var encode_handlers = map[string]EncodeHandler{
	"SessionAuthParams":   encodeSessionAuthParams,
	"SessionAuthResponse": encodeSessionAuthResponse,
	"Ok":                  encodeOk,
	"Fail":                encodeFail,
	"EquipLoadParams":     encodeEquipLoadParams,
	"EquipLoadResponse":   encodeEquipLoadResponse,
	"EquipUnLoadParams":   encodeEquipUnLoadParams,
	"EquipUnLoadResponse": encodeEquipUnLoadResponse,
	"LoginResponse":       encodeLoginResponse,
	"JoinParams":          encodeJoinParams,
	"JoinResponse":        encodeJoinResponse}

func Encode(encode_method string, v interface{}) (*packet.Packet, error) {
	protocol := pt.NameToId[encode_method]
	buffer := packet.Writer()
	buffer.WriteUint16(protocol)
	err := encode_handlers[encode_method](buffer, v)
	return buffer, err
}
