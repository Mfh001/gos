// Code generated by protoc-gen-go. DO NOT EDIT.
// source: connectApp.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	connectApp.proto
	connectToGame.proto
	gameApp.proto

It has these top-level messages:
	DispatchRequest
	DispatchReply
	AgentInfo
	OkReply
	RouteMsg
	RegisterMsg
	RegisterReply
	DeploySceneRequest
	DeploySceneReply
	RequestPlayerRequest
	RequestPlayerReply
	DispatchGameRequest
	DispatchGameReply
	ReportGameRequest
	ReportGameReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type DispatchRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=accountId" json:"accountId,omitempty"`
	GroupId   string `protobuf:"bytes,2,opt,name=groupId" json:"groupId,omitempty"`
}

func (m *DispatchRequest) Reset()                    { *m = DispatchRequest{} }
func (m *DispatchRequest) String() string            { return proto1.CompactTextString(m) }
func (*DispatchRequest) ProtoMessage()               {}
func (*DispatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DispatchRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *DispatchRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

type DispatchReply struct {
	ConnectAppId   string `protobuf:"bytes,1,opt,name=connectAppId" json:"connectAppId,omitempty"`
	ConnectAppHost string `protobuf:"bytes,2,opt,name=connectAppHost" json:"connectAppHost,omitempty"`
	ConnectAppPort string `protobuf:"bytes,3,opt,name=connectAppPort" json:"connectAppPort,omitempty"`
}

func (m *DispatchReply) Reset()                    { *m = DispatchReply{} }
func (m *DispatchReply) String() string            { return proto1.CompactTextString(m) }
func (*DispatchReply) ProtoMessage()               {}
func (*DispatchReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DispatchReply) GetConnectAppId() string {
	if m != nil {
		return m.ConnectAppId
	}
	return ""
}

func (m *DispatchReply) GetConnectAppHost() string {
	if m != nil {
		return m.ConnectAppHost
	}
	return ""
}

func (m *DispatchReply) GetConnectAppPort() string {
	if m != nil {
		return m.ConnectAppPort
	}
	return ""
}

type AgentInfo struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Port string `protobuf:"bytes,3,opt,name=port" json:"port,omitempty"`
	Ccu  int32  `protobuf:"varint,4,opt,name=ccu" json:"ccu,omitempty"`
}

func (m *AgentInfo) Reset()                    { *m = AgentInfo{} }
func (m *AgentInfo) String() string            { return proto1.CompactTextString(m) }
func (*AgentInfo) ProtoMessage()               {}
func (*AgentInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AgentInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *AgentInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AgentInfo) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *AgentInfo) GetCcu() int32 {
	if m != nil {
		return m.Ccu
	}
	return 0
}

type OkReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *OkReply) Reset()                    { *m = OkReply{} }
func (m *OkReply) String() string            { return proto1.CompactTextString(m) }
func (*OkReply) ProtoMessage()               {}
func (*OkReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *OkReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto1.RegisterType((*DispatchRequest)(nil), "connectApp.DispatchRequest")
	proto1.RegisterType((*DispatchReply)(nil), "connectApp.DispatchReply")
	proto1.RegisterType((*AgentInfo)(nil), "connectApp.AgentInfo")
	proto1.RegisterType((*OkReply)(nil), "connectApp.OkReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dispatcher service

type DispatcherClient interface {
	DispatchPlayer(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchReply, error)
	ReportAgentInfo(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*OkReply, error)
}

type dispatcherClient struct {
	cc *grpc.ClientConn
}

func NewDispatcherClient(cc *grpc.ClientConn) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) DispatchPlayer(ctx context.Context, in *DispatchRequest, opts ...grpc.CallOption) (*DispatchReply, error) {
	out := new(DispatchReply)
	err := grpc.Invoke(ctx, "/connectApp.Dispatcher/DispatchPlayer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) ReportAgentInfo(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*OkReply, error) {
	out := new(OkReply)
	err := grpc.Invoke(ctx, "/connectApp.Dispatcher/ReportAgentInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dispatcher service

type DispatcherServer interface {
	DispatchPlayer(context.Context, *DispatchRequest) (*DispatchReply, error)
	ReportAgentInfo(context.Context, *AgentInfo) (*OkReply, error)
}

func RegisterDispatcherServer(s *grpc.Server, srv DispatcherServer) {
	s.RegisterService(&_Dispatcher_serviceDesc, srv)
}

func _Dispatcher_DispatchPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).DispatchPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connectApp.Dispatcher/DispatchPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).DispatchPlayer(ctx, req.(*DispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_ReportAgentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).ReportAgentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connectApp.Dispatcher/ReportAgentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).ReportAgentInfo(ctx, req.(*AgentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connectApp.Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DispatchPlayer",
			Handler:    _Dispatcher_DispatchPlayer_Handler,
		},
		{
			MethodName: "ReportAgentInfo",
			Handler:    _Dispatcher_ReportAgentInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connectApp.proto",
}

func init() { proto1.RegisterFile("connectApp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x1b, 0xda, 0x12, 0x72, 0x82, 0xb6, 0x3a, 0x84, 0x64, 0x0a, 0x43, 0x65, 0x24, 0xd4,
	0xa9, 0x03, 0x3c, 0x00, 0x2a, 0x62, 0x20, 0x2c, 0x54, 0xd9, 0x60, 0x0b, 0xae, 0x69, 0x2b, 0xa2,
	0xd8, 0xc4, 0xf6, 0x90, 0x99, 0xa7, 0xe0, 0x6d, 0x91, 0x4d, 0x5d, 0xa7, 0x51, 0xa7, 0xfc, 0xff,
	0xe7, 0xd3, 0x7f, 0xbe, 0x8b, 0x61, 0xc4, 0x44, 0x59, 0x72, 0xa6, 0xe7, 0x52, 0xce, 0x64, 0x25,
	0xb4, 0x40, 0x08, 0x84, 0xa6, 0x30, 0x7c, 0xda, 0x28, 0x99, 0x6b, 0xb6, 0xce, 0xf8, 0xb7, 0xe1,
	0x4a, 0xe3, 0x35, 0x24, 0x39, 0x63, 0xc2, 0x94, 0x3a, 0x5d, 0x92, 0x68, 0x12, 0x4d, 0x93, 0x2c,
	0x00, 0x24, 0x10, 0xaf, 0x2a, 0x61, 0x64, 0xba, 0x24, 0x47, 0xee, 0xcc, 0x5b, 0xfa, 0x13, 0xc1,
	0x59, 0xc8, 0x92, 0x45, 0x8d, 0x14, 0x4e, 0x43, 0xab, 0x5d, 0xd8, 0x1e, 0xc3, 0x5b, 0x18, 0x04,
	0xff, 0x2c, 0x94, 0xde, 0xc6, 0xb6, 0xe8, 0x7e, 0xdd, 0x42, 0x54, 0x9a, 0x74, 0xdb, 0x75, 0x96,
	0xd2, 0x37, 0x48, 0xe6, 0x2b, 0x5e, 0xea, 0xb4, 0xfc, 0x14, 0x88, 0xd0, 0x33, 0x66, 0xe3, 0x1b,
	0x3b, 0x6d, 0xd9, 0x3a, 0xb4, 0x71, 0xda, 0x32, 0x19, 0x22, 0x9d, 0xc6, 0x11, 0x74, 0x19, 0x33,
	0xa4, 0x37, 0x89, 0xa6, 0xfd, 0xcc, 0x4a, 0x7a, 0x03, 0xf1, 0xeb, 0xd7, 0xff, 0x64, 0x04, 0x62,
	0x65, 0x18, 0xe3, 0x4a, 0xb9, 0xec, 0x93, 0xcc, 0xdb, 0xbb, 0xdf, 0x08, 0xc0, 0x6f, 0x81, 0x57,
	0xf8, 0x02, 0x03, 0xef, 0x16, 0x45, 0x5e, 0xf3, 0x0a, 0xaf, 0x66, 0x8d, 0x1f, 0xd2, 0xda, 0xfd,
	0xf8, 0xf2, 0xf0, 0xa1, 0x2c, 0x6a, 0xda, 0xc1, 0x07, 0x18, 0x66, 0xdc, 0xde, 0x2d, 0x0c, 0x78,
	0xd1, 0xac, 0xdf, 0xe1, 0xf1, 0x79, 0x13, 0x6f, 0xef, 0x4c, 0x3b, 0x8f, 0xf1, 0x7b, 0xdf, 0xbd,
	0x80, 0x8f, 0x63, 0xf7, 0xb9, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x27, 0x1d, 0xa8, 0x93, 0x1c,
	0x02, 0x00, 0x00,
}
