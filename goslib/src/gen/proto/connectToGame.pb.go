// Code generated by protoc-gen-go. DO NOT EDIT.
// source: connectToGame.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RouteMsg struct {
	Category int32  `protobuf:"varint,2,opt,name=category" json:"category,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RouteMsg) Reset()                    { *m = RouteMsg{} }
func (m *RouteMsg) String() string            { return proto1.CompactTextString(m) }
func (*RouteMsg) ProtoMessage()               {}
func (*RouteMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RouteMsg) GetCategory() int32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *RouteMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RegisterMsg struct {
	AccountId    string `protobuf:"bytes,1,opt,name=accountId" json:"accountId,omitempty"`
	ConnectAppId string `protobuf:"bytes,2,opt,name=connectAppId" json:"connectAppId,omitempty"`
	IsRegister   bool   `protobuf:"varint,3,opt,name=isRegister" json:"isRegister,omitempty"`
}

func (m *RegisterMsg) Reset()                    { *m = RegisterMsg{} }
func (m *RegisterMsg) String() string            { return proto1.CompactTextString(m) }
func (*RegisterMsg) ProtoMessage()               {}
func (*RegisterMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RegisterMsg) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *RegisterMsg) GetConnectAppId() string {
	if m != nil {
		return m.ConnectAppId
	}
	return ""
}

func (m *RegisterMsg) GetIsRegister() bool {
	if m != nil {
		return m.IsRegister
	}
	return false
}

type RegisterReply struct {
	Status bool `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *RegisterReply) Reset()                    { *m = RegisterReply{} }
func (m *RegisterReply) String() string            { return proto1.CompactTextString(m) }
func (*RegisterReply) ProtoMessage()               {}
func (*RegisterReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RegisterReply) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type DeploySceneRequest struct {
	SceneId string `protobuf:"bytes,1,opt,name=sceneId" json:"sceneId,omitempty"`
}

func (m *DeploySceneRequest) Reset()                    { *m = DeploySceneRequest{} }
func (m *DeploySceneRequest) String() string            { return proto1.CompactTextString(m) }
func (*DeploySceneRequest) ProtoMessage()               {}
func (*DeploySceneRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *DeploySceneRequest) GetSceneId() string {
	if m != nil {
		return m.SceneId
	}
	return ""
}

type DeploySceneReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *DeploySceneReply) Reset()                    { *m = DeploySceneReply{} }
func (m *DeploySceneReply) String() string            { return proto1.CompactTextString(m) }
func (*DeploySceneReply) ProtoMessage()               {}
func (*DeploySceneReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *DeploySceneReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RequestPlayerRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=accountId" json:"accountId,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RequestPlayerRequest) Reset()                    { *m = RequestPlayerRequest{} }
func (m *RequestPlayerRequest) String() string            { return proto1.CompactTextString(m) }
func (*RequestPlayerRequest) ProtoMessage()               {}
func (*RequestPlayerRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *RequestPlayerRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *RequestPlayerRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RequestPlayerReply struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RequestPlayerReply) Reset()                    { *m = RequestPlayerReply{} }
func (m *RequestPlayerReply) String() string            { return proto1.CompactTextString(m) }
func (*RequestPlayerReply) ProtoMessage()               {}
func (*RequestPlayerReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *RequestPlayerReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto1.RegisterType((*RouteMsg)(nil), "connectApp.RouteMsg")
	proto1.RegisterType((*RegisterMsg)(nil), "connectApp.RegisterMsg")
	proto1.RegisterType((*RegisterReply)(nil), "connectApp.RegisterReply")
	proto1.RegisterType((*DeploySceneRequest)(nil), "connectApp.DeploySceneRequest")
	proto1.RegisterType((*DeploySceneReply)(nil), "connectApp.DeploySceneReply")
	proto1.RegisterType((*RequestPlayerRequest)(nil), "connectApp.RequestPlayerRequest")
	proto1.RegisterType((*RequestPlayerReply)(nil), "connectApp.RequestPlayerReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RouteConnectGame service

type RouteConnectGameClient interface {
	// A Bidirectional streaming RPC.
	AgentStream(ctx context.Context, opts ...grpc.CallOption) (RouteConnectGame_AgentStreamClient, error)
	DeployScene(ctx context.Context, in *DeploySceneRequest, opts ...grpc.CallOption) (*DeploySceneReply, error)
	RequestPlayer(ctx context.Context, in *RequestPlayerRequest, opts ...grpc.CallOption) (*RequestPlayerReply, error)
}

type routeConnectGameClient struct {
	cc *grpc.ClientConn
}

func NewRouteConnectGameClient(cc *grpc.ClientConn) RouteConnectGameClient {
	return &routeConnectGameClient{cc}
}

func (c *routeConnectGameClient) AgentStream(ctx context.Context, opts ...grpc.CallOption) (RouteConnectGame_AgentStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RouteConnectGame_serviceDesc.Streams[0], c.cc, "/connectApp.RouteConnectGame/AgentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeConnectGameAgentStreamClient{stream}
	return x, nil
}

type RouteConnectGame_AgentStreamClient interface {
	Send(*RouteMsg) error
	Recv() (*RouteMsg, error)
	grpc.ClientStream
}

type routeConnectGameAgentStreamClient struct {
	grpc.ClientStream
}

func (x *routeConnectGameAgentStreamClient) Send(m *RouteMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeConnectGameAgentStreamClient) Recv() (*RouteMsg, error) {
	m := new(RouteMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeConnectGameClient) DeployScene(ctx context.Context, in *DeploySceneRequest, opts ...grpc.CallOption) (*DeploySceneReply, error) {
	out := new(DeploySceneReply)
	err := grpc.Invoke(ctx, "/connectApp.RouteConnectGame/DeployScene", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeConnectGameClient) RequestPlayer(ctx context.Context, in *RequestPlayerRequest, opts ...grpc.CallOption) (*RequestPlayerReply, error) {
	out := new(RequestPlayerReply)
	err := grpc.Invoke(ctx, "/connectApp.RouteConnectGame/RequestPlayer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RouteConnectGame service

type RouteConnectGameServer interface {
	// A Bidirectional streaming RPC.
	AgentStream(RouteConnectGame_AgentStreamServer) error
	DeployScene(context.Context, *DeploySceneRequest) (*DeploySceneReply, error)
	RequestPlayer(context.Context, *RequestPlayerRequest) (*RequestPlayerReply, error)
}

func RegisterRouteConnectGameServer(s *grpc.Server, srv RouteConnectGameServer) {
	s.RegisterService(&_RouteConnectGame_serviceDesc, srv)
}

func _RouteConnectGame_AgentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteConnectGameServer).AgentStream(&routeConnectGameAgentStreamServer{stream})
}

type RouteConnectGame_AgentStreamServer interface {
	Send(*RouteMsg) error
	Recv() (*RouteMsg, error)
	grpc.ServerStream
}

type routeConnectGameAgentStreamServer struct {
	grpc.ServerStream
}

func (x *routeConnectGameAgentStreamServer) Send(m *RouteMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeConnectGameAgentStreamServer) Recv() (*RouteMsg, error) {
	m := new(RouteMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteConnectGame_DeployScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploySceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteConnectGameServer).DeployScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connectApp.RouteConnectGame/DeployScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteConnectGameServer).DeployScene(ctx, req.(*DeploySceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteConnectGame_RequestPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteConnectGameServer).RequestPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connectApp.RouteConnectGame/RequestPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteConnectGameServer).RequestPlayer(ctx, req.(*RequestPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouteConnectGame_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connectApp.RouteConnectGame",
	HandlerType: (*RouteConnectGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployScene",
			Handler:    _RouteConnectGame_DeployScene_Handler,
		},
		{
			MethodName: "RequestPlayer",
			Handler:    _RouteConnectGame_RequestPlayer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentStream",
			Handler:       _RouteConnectGame_AgentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "connectToGame.proto",
}

func init() { proto1.RegisterFile("connectToGame.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x8e, 0xda, 0x30,
	0x14, 0xc4, 0xb4, 0x40, 0x78, 0x50, 0x09, 0xbd, 0xa2, 0x2a, 0x8a, 0x10, 0x8a, 0x7c, 0x69, 0x0e,
	0x55, 0x54, 0xb5, 0xb7, 0x5e, 0x2a, 0xda, 0x4a, 0x2d, 0x07, 0xa4, 0xca, 0xec, 0x69, 0x6f, 0x5e,
	0x63, 0x45, 0x48, 0x21, 0xce, 0xc6, 0xce, 0x21, 0x5f, 0xbe, 0xd7, 0x95, 0x0d, 0x26, 0x61, 0x97,
	0xe5, 0x14, 0xcf, 0x64, 0x32, 0xe3, 0x37, 0x2f, 0xf0, 0x51, 0xa8, 0xa2, 0x90, 0xc2, 0xdc, 0xa9,
	0xbf, 0xfc, 0x20, 0xd3, 0xb2, 0x52, 0x46, 0x21, 0x9c, 0xc8, 0x55, 0x59, 0xd2, 0x1f, 0x10, 0x30,
	0x55, 0x1b, 0xb9, 0xd1, 0x19, 0x46, 0x10, 0x08, 0x6e, 0x64, 0xa6, 0xaa, 0x26, 0xec, 0xc7, 0x24,
	0x19, 0xb0, 0x33, 0x46, 0x84, 0xf7, 0x3b, 0x6e, 0x78, 0xf8, 0x2e, 0x26, 0xc9, 0x94, 0xb9, 0x33,
	0x55, 0x30, 0x61, 0x32, 0xdb, 0x6b, 0x23, 0x2b, 0xfb, 0xf9, 0x02, 0xc6, 0x5c, 0x08, 0x55, 0x17,
	0x66, 0xbd, 0x0b, 0x49, 0x4c, 0x92, 0x31, 0x6b, 0x09, 0xa4, 0x30, 0x6d, 0x63, 0xd7, 0x3b, 0x17,
	0x30, 0x66, 0x17, 0x1c, 0x2e, 0x01, 0xf6, 0xda, 0x5b, 0xba, 0xa8, 0x80, 0x75, 0x18, 0xfa, 0x19,
	0x3e, 0xf8, 0x33, 0x93, 0x65, 0xde, 0xe0, 0x27, 0x18, 0x6a, 0xc3, 0x4d, 0xad, 0x5d, 0x5e, 0xc0,
	0x4e, 0x88, 0xa6, 0x80, 0x7f, 0x64, 0x99, 0xab, 0x66, 0x2b, 0x64, 0x21, 0x99, 0x7c, 0xac, 0xa5,
	0x36, 0x18, 0xc2, 0x48, 0x5b, 0x7c, 0xbe, 0x9e, 0x87, 0xf4, 0x0b, 0xcc, 0x2e, 0xf4, 0xd6, 0xdb,
	0xaa, 0x6b, 0x21, 0xa4, 0xf6, 0xe6, 0x1e, 0xd2, 0x7f, 0x30, 0x3f, 0x59, 0xfe, 0xcf, 0x79, 0x63,
	0xef, 0x72, 0xf4, 0xbf, 0x5d, 0x80, 0x6f, 0xb0, 0xdf, 0x69, 0x30, 0x01, 0x7c, 0xe1, 0x64, 0x93,
	0xbd, 0x92, 0xb4, 0xca, 0x6f, 0x4f, 0x04, 0x66, 0x6e, 0x51, 0xbf, 0x8f, 0x85, 0xd9, 0x75, 0xe2,
	0x4f, 0x98, 0xac, 0x32, 0x59, 0x98, 0xad, 0xa9, 0x24, 0x3f, 0xe0, 0x3c, 0x6d, 0xdb, 0x4c, 0xfd,
	0x56, 0xa3, 0xab, 0x2c, 0xed, 0x25, 0xe4, 0x2b, 0xc1, 0x0d, 0x4c, 0x3a, 0x73, 0xe3, 0xb2, 0x2b,
	0x7d, 0x5d, 0x60, 0xb4, 0x78, 0xf3, 0x7d, 0x99, 0x37, 0xb4, 0x87, 0x5b, 0xbb, 0x9f, 0xce, 0x38,
	0x18, 0x5f, 0x64, 0x5f, 0xe9, 0x2c, 0x5a, 0xde, 0x50, 0x38, 0xd3, 0x5f, 0xa3, 0xfb, 0x81, 0xfb,
	0x6d, 0x1f, 0x86, 0xee, 0xf1, 0xfd, 0x39, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xc8, 0xf8, 0x34, 0xd4,
	0x02, 0x00, 0x00,
}
