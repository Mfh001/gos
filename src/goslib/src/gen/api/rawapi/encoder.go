/*
 * Generated by tools/gen_protocol_raw
 */

package rawapi

import (
	"gen/api/pt"
	"goslib/packet"
)

func encodeSessionAuthParams(buffer *packet.Packet, value interface{}) {
	v := value.(*pt.SessionAuthParams)
	buffer.WriteString(v.AccountId)
	buffer.WriteString(v.Token)
}

func encodeSessionAuthResponse(buffer *packet.Packet, value interface{}) {
	v := value.(*pt.SessionAuthResponse)
	buffer.WriteBool(v.Success)
}

func encodeOk(buffer *packet.Packet, value interface{}) {
	v := value.(*pt.Ok)
	buffer.WriteBool(v.OK)
}

func encodeFail(buffer *packet.Packet, value interface{}) {
	v := value.(*pt.Fail)
	buffer.WriteString(v.Fail)
}

func encodeEquipLoadParams(buffer *packet.Packet, value interface{}) {
	v := value.(*pt.EquipLoadParams)
	buffer.WriteString(v.PlayerID)
	buffer.WriteString(v.EquipId)
	buffer.WriteString(v.HeroId)
}

func encodeEquipLoadResponse(buffer *packet.Packet, value interface{}) {
	v := value.(*pt.EquipLoadResponse)
	buffer.WriteString(v.PlayerID)
	buffer.WriteString(v.EquipId)
	buffer.WriteUint32(v.Level)
}

func encodeEquipUnLoadParams(buffer *packet.Packet, value interface{}) {
	v := value.(*pt.EquipUnLoadParams)
	buffer.WriteString(v.PlayerID)
	buffer.WriteString(v.EquipId)
	buffer.WriteString(v.HeroId)
}

func encodeEquipUnLoadResponse(buffer *packet.Packet, value interface{}) {
	v := value.(*pt.EquipUnLoadResponse)
	buffer.WriteString(v.PlayerID)
	buffer.WriteString(v.EquipId)
	buffer.WriteUint32(v.Level)
}

func encodeLoginResponse(buffer *packet.Packet, value interface{}) {
	v := value.(*pt.LoginResponse)
	buffer.WriteString(v.Uuid)
	buffer.WriteUint32(v.Level)
	buffer.WriteFloat32(v.Exp)

	buffer.WriteUint16(uint16(len(v.Equips)))
	for i := 0; i < len(v.Equips); i++ {
		encodeEquipLoadResponse(buffer, v.Equips[i])
	}

	encodeEquipLoadParams(buffer, v.HeadEquip)

	buffer.WriteUint16(uint16(len(v.Friends)))
	for i := 0; i < len(v.Friends); i++ {
		buffer.WriteString(v.Friends[i])
	}

	buffer.WriteUint16(uint16(len(v.Ages)))
	for i := 0; i < len(v.Ages); i++ {
		buffer.WriteInt32(v.Ages[i])
	}
}

func encodeJoinParams(buffer *packet.Packet, value interface{}) {
	v := value.(*pt.JoinParams)
	buffer.WriteString(v.RoomId)
}

func encodeJoinResponse(buffer *packet.Packet, value interface{}) {
	v := value.(*pt.JoinResponse)
	buffer.WriteBool(v.Success)
}

type EncodeHandler func(buffer *packet.Packet, value interface{})

var encode_handlers = map[string]EncodeHandler{
	"SessionAuthParams":   encodeSessionAuthParams,
	"SessionAuthResponse": encodeSessionAuthResponse,
	"Ok":                  encodeOk,
	"Fail":                encodeFail,
	"EquipLoadParams":     encodeEquipLoadParams,
	"EquipLoadResponse":   encodeEquipLoadResponse,
	"EquipUnLoadParams":   encodeEquipUnLoadParams,
	"EquipUnLoadResponse": encodeEquipUnLoadResponse,
	"LoginResponse":       encodeLoginResponse,
	"JoinParams":          encodeJoinParams,
	"JoinResponse":        encodeJoinResponse}

func Encode(encode_method string, v interface{}) *packet.Packet {
	protocol := pt.NameToId[encode_method]
	buffer := packet.Writer()
	buffer.WriteUint16(protocol)
	encode_handlers[encode_method](buffer, v)
	return buffer
}
