/*
 * Generated by tools/gen_protocol_raw
 */

package rawapi

import (
	"errors"
	"gen/api/pt"
	"goslib/packet"
)

func decodeSessionAuthParams(buffer *packet.Packet) (interface{}, error) {
	var err error
	data := &pt.SessionAuthParams{}
	data.AccountId, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	data.Token, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	return data, err
}

func decodeSessionAuthResponse(buffer *packet.Packet) (interface{}, error) {
	var err error
	data := &pt.SessionAuthResponse{}
	data.Success, err = buffer.ReadBool()
	if err != nil {
		return nil, err
	}
	return data, err
}

func decodeOk(buffer *packet.Packet) (interface{}, error) {
	var err error
	data := &pt.Ok{}
	data.OK, err = buffer.ReadBool()
	if err != nil {
		return nil, err
	}
	return data, err
}

func decodeFail(buffer *packet.Packet) (interface{}, error) {
	var err error
	data := &pt.Fail{}
	data.Fail, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	return data, err
}

func decodeEquipLoadParams(buffer *packet.Packet) (interface{}, error) {
	var err error
	data := &pt.EquipLoadParams{}
	data.PlayerID, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	data.EquipId, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	data.HeroId, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	return data, err
}

func decodeEquipLoadResponse(buffer *packet.Packet) (interface{}, error) {
	var err error
	data := &pt.EquipLoadResponse{}
	data.PlayerID, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	data.EquipId, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	data.Level, err = buffer.ReadUint32()
	if err != nil {
		return nil, err
	}
	return data, err
}

func decodeEquipUnLoadParams(buffer *packet.Packet) (interface{}, error) {
	var err error
	data := &pt.EquipUnLoadParams{}
	data.PlayerID, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	data.EquipId, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	data.HeroId, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	return data, err
}

func decodeEquipUnLoadResponse(buffer *packet.Packet) (interface{}, error) {
	var err error
	data := &pt.EquipUnLoadResponse{}
	data.PlayerID, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	data.EquipId, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	data.Level, err = buffer.ReadUint32()
	if err != nil {
		return nil, err
	}
	return data, err
}

func decodeLoginResponse(buffer *packet.Packet) (interface{}, error) {
	var err error
	data := &pt.LoginResponse{}
	data.Uuid, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	data.Level, err = buffer.ReadUint32()
	if err != nil {
		return nil, err
	}
	data.Exp, err = buffer.ReadFloat32()
	if err != nil {
		return nil, err
	}

	EquipsLen, err := buffer.ReadUint16()
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(EquipsLen); i++ {
		elem, err := decodeEquipLoadResponse(buffer)
		if err != nil {
			return nil, err
		}
		data.Equips = append(data.Equips, elem.(*pt.EquipLoadResponse))
	}

	valueHeadEquip, err := decodeEquipLoadParams(buffer)
	if err != nil {
		return nil, err
	}
	data.HeadEquip = valueHeadEquip.(*pt.EquipLoadParams)

	FriendsLen, err := buffer.ReadUint16()
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(FriendsLen); i++ {
		elem, err := buffer.ReadString()
		if err != nil {
			return nil, err
		}
		data.Friends = append(data.Friends, elem)
	}

	AgesLen, err := buffer.ReadUint16()
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(AgesLen); i++ {
		elem, err := buffer.ReadInt32()
		if err != nil {
			return nil, err
		}
		data.Ages = append(data.Ages, elem)
	}
	return data, err
}

func decodeRoomJoinParams(buffer *packet.Packet) (interface{}, error) {
	var err error
	data := &pt.RoomJoinParams{}
	data.RoomId, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	data.PlayerId, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	return data, err
}

func decodeRoomJoinResponse(buffer *packet.Packet) (interface{}, error) {
	var err error
	data := &pt.RoomJoinResponse{}
	data.Success, err = buffer.ReadBool()
	if err != nil {
		return nil, err
	}
	return data, err
}

func decodeRoomJoinNotice(buffer *packet.Packet) (interface{}, error) {
	var err error
	data := &pt.RoomJoinNotice{}
	data.RoomId, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	data.NewPlayerId, err = buffer.ReadString()
	if err != nil {
		return nil, err
	}
	return data, err
}

type DecodeHandler func(buffer *packet.Packet) (interface{}, error)

var decode_handlers = map[string]DecodeHandler{
	"SessionAuthParams":   decodeSessionAuthParams,
	"SessionAuthResponse": decodeSessionAuthResponse,
	"Ok":                  decodeOk,
	"Fail":                decodeFail,
	"EquipLoadParams":     decodeEquipLoadParams,
	"EquipLoadResponse":   decodeEquipLoadResponse,
	"EquipUnLoadParams":   decodeEquipUnLoadParams,
	"EquipUnLoadResponse": decodeEquipUnLoadResponse,
	"LoginResponse":       decodeLoginResponse,
	"RoomJoinParams":      decodeRoomJoinParams,
	"RoomJoinResponse":    decodeRoomJoinResponse,
	"RoomJoinNotice":      decodeRoomJoinNotice}

func Decode(decode_method string, buffer *packet.Packet) (interface{}, error) {
	if handler, ok := decode_handlers[decode_method]; ok {
		return handler(buffer)
	} else {
		return nil, errors.New("decode handler not found")
	}
}
