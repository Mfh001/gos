/*
 * Generated by tools/gen_protocol_raw
 */

package rawapi

import (
	"gen/api/pt"
	"goslib/packet"
)

func decodeSessionAuthParams(buffer *packet.Packet) interface{} {
	data := &pt.SessionAuthParams{}
	data.AccountId = buffer.ReadString()
	data.Token = buffer.ReadString()
	return data
}

func decodeSessionAuthResponse(buffer *packet.Packet) interface{} {
	data := &pt.SessionAuthResponse{}
	data.Success = buffer.ReadBool()
	return data
}

func decodeOk(buffer *packet.Packet) interface{} {
	data := &pt.Ok{}
	data.OK = buffer.ReadBool()
	return data
}

func decodeFail(buffer *packet.Packet) interface{} {
	data := &pt.Fail{}
	data.Fail = buffer.ReadString()
	return data
}

func decodeEquipLoadParams(buffer *packet.Packet) interface{} {
	data := &pt.EquipLoadParams{}
	data.PlayerID = buffer.ReadString()
	data.EquipId = buffer.ReadString()
	data.HeroId = buffer.ReadString()
	return data
}

func decodeEquipLoadResponse(buffer *packet.Packet) interface{} {
	data := &pt.EquipLoadResponse{}
	data.PlayerID = buffer.ReadString()
	data.EquipId = buffer.ReadString()
	data.Level = buffer.ReadUint32()
	return data
}

func decodeEquipUnLoadParams(buffer *packet.Packet) interface{} {
	data := &pt.EquipUnLoadParams{}
	data.PlayerID = buffer.ReadString()
	data.EquipId = buffer.ReadString()
	data.HeroId = buffer.ReadString()
	return data
}

func decodeEquipUnLoadResponse(buffer *packet.Packet) interface{} {
	data := &pt.EquipUnLoadResponse{}
	data.PlayerID = buffer.ReadString()
	data.EquipId = buffer.ReadString()
	data.Level = buffer.ReadUint32()
	return data
}

func decodeLoginResponse(buffer *packet.Packet) interface{} {
	data := &pt.LoginResponse{}
	data.Uuid = buffer.ReadString()
	data.Level = buffer.ReadUint32()
	data.Exp = buffer.ReadFloat32()

	for i := 0; i < int(buffer.ReadUint16()); i++ {
		data.Equips = append(data.Equips, decodeEquipLoadResponse(buffer).(*pt.EquipLoadResponse))
	}

	for i := 0; i < int(buffer.ReadUint16()); i++ {
		data.Friends = append(data.Friends, buffer.ReadString())
	}

	for i := 0; i < int(buffer.ReadUint16()); i++ {
		data.Ages = append(data.Ages, buffer.ReadInt32())
	}
	return data
}

func decodeJoinParams(buffer *packet.Packet) interface{} {
	data := &pt.JoinParams{}
	data.RoomId = buffer.ReadString()
	return data
}

func decodeJoinResponse(buffer *packet.Packet) interface{} {
	data := &pt.JoinResponse{}
	data.Success = buffer.ReadBool()
	return data
}

type DecodeHandler func(buffer *packet.Packet) interface{}

var decode_handlers = map[string]DecodeHandler{
	"SessionAuthParams":   decodeSessionAuthParams,
	"SessionAuthResponse": decodeSessionAuthResponse,
	"Ok":                  decodeOk,
	"Fail":                decodeFail,
	"EquipLoadParams":     decodeEquipLoadParams,
	"EquipLoadResponse":   decodeEquipLoadResponse,
	"EquipUnLoadParams":   decodeEquipUnLoadParams,
	"EquipUnLoadResponse": decodeEquipUnLoadResponse,
	"LoginResponse":       decodeLoginResponse,
	"JoinParams":          decodeJoinParams,
	"JoinResponse":        decodeJoinResponse}

func Decode(decode_method string, buffer *packet.Packet) interface{} {
	if handler, ok := decode_handlers[decode_method]; ok {
		return handler(buffer)
	} else {
		return nil
	}
}
